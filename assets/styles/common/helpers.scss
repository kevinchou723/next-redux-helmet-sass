body.noscroll {
  overflow: hidden;
  position: fixed;
}

.textreplace {
  display: block;
  padding: 0;
  text-indent: 100%;
  white-space: nowrap;
  overflow: hidden;
}

.textreplace-sr {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

%fullsize, .fullsize {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
}

%defullsize {
  position: static;
  top: auto;
  right: auto;
  bottom: auto;
  left: auto;
}

.test-overlay {
  -webkit-filter:invert(100%);
  filter:invert(100%);
  filter:progid:DXImageTransform.Microsoft.BasicImage(invert='1');
  position: absolute;
  z-index: 999999;
  opacity: .5;
  top: 0;
  left: 0;
  width: 100%;
}

@mixin aspect-ratio($width, $height) {
  position: relative;
  &:before {
    display: block;
    content: "";
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }
}

@mixin remove-aspect-ratio() {
  position: relative;
  &:before {
    display: none;
  }
}

@function em($pixels, $dens: 1) {
  @return $pixels / $base-font-size / $dens * 1em;
}

@function rem($pixels, $dens: 1) {
  @return $pixels / $base-font-size / $dens * 1rem;
}

@function em2rem($em) {
  @return deunit($em) * 1rem;
}

@function rem2em($rem) {
  @return deunit($rem) * 1em;
}

@function deunit($value) {
  @return $value / ($value * 0 + 1);
}

/*https://gist.github.com/terkel/4373420#gistcomment-1626534*/
@function decimal-round ($number, $digits: 0, $mode: round) {
  $n: 1;
  // $number must be a number
  @if type-of($number) != number {
      @warn '#{ $number } is not a number.';
      @return $number;
  }
  // $digits must be a unitless number
  @if type-of($digits) != number {
      @warn '#{ $digits } is not a number.';
      @return $number;
  } @else if not unitless($digits) {
      @warn '#{ $digits } has a unit.';
      @return $number;
  }
  @if $digits > 0 {
      @for $i from 1 through $digits {
          $n: $n * 10;
      }
  }
  @if $mode == round {
      @return round($number * $n) / $n;
  } @else if $mode == ceil {
      @return ceil($number * $n) / $n;
  } @else if $mode == floor {
      @return floor($number * $n) / $n;
  } @else {
      @warn '#{ $mode } is undefined keyword.';
      @return $number;
  }
}

@mixin columns($numCols, $gutter: 2em) {
  /* Stop IE from rounding number up */
  $roundPercentage: decimal-round((100% / $numCols), 1);
  @include safe-flexbox;
  flex-wrap: wrap;
  justify-content: flex-start;
  > * {
    width: 100%;
    flex-shrink: 0;
    width: calc(#{$roundPercentage} - #{$gutter / $numCols * ($numCols - 1)});
    margin-right: $gutter;
    margin-bottom: 0;
    @for $i from 1 through 16 {
      $n: #{$i}#{"n+"}#{$i}; // this is dumb
      &:nth-child(#{$n}) {
        @if ($i == $numCols) {
          margin-right: 0;
        } @else if ($i < $numCols) {
          margin-right: $gutter;
        }
      }
    }
    &:last-child {
      margin-right: 0;
    }
    &:nth-last-child(-n+ #{$numCols}) {
      & > .component--small-medium {
        margin-bottom: 0;
      }
      & > .component--smallest {
        margin-bottom: 0;
      }
      & > .component--small {
        margin-bottom: 0;
      }
      & > .component--medium {
        margin-bottom: 0;
      }
      & > .component--large {
        margin-bottom: 0;
      }
      & > .component {
        margin-bottom: 0;
      }
    }
  }
}

@mixin safe-flexbox {
  display: flex;
  > * {
    -ms-flex: 0 1 auto;
  }
}

@mixin safe-inline-flexbox {
  display: inline-flex;
  > * {
    -ms-flex: 0 1 auto;
  }
}

@mixin absolute-center {
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
}

@mixin absolute-center--horizontal {
  position: absolute;
  left: 50%;
  right: auto;
  transform: translateX(-50%);
}

@mixin absolute-center--vertical {
  position: absolute;
  top: 50%;
  bottom: auto;
  transform: translateY(-50%);
}

@mixin reset-absolute-center {
  position: static;
  left: auto;
  top: auto;
  transform: none;
}

@mixin fullscreen {
  position: fixed;
  width: 100%;
  height: 100vh;
  left: 0;
  top: 0;
}

@mixin font-legibility {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

@mixin aspect-ratio($width, $height) {
  position: relative;
  &:before {
    display: block;
    content: "";
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }
}

@mixin remove-aspect-ratio() {
  position: relative;
  &:before {
    display: none;
  }
}

@mixin colored-top-border($color, $width: 2px) {
  border-top: $width solid $color;
}
